# Script PowerShell para build com fallbacks para problemas de conectividade
Write-Host "üöÄ TSEL Backend - Build com Fallbacks" -ForegroundColor Green
Write-Host "======================================" -ForegroundColor Green

# Fun√ß√£o para tentar build com diferentes configura√ß√µes
function Try-Build {
    param(
        [string]$Dockerfile,
        [string]$Description
    )
    
    Write-Host ""
    Write-Host "üîÑ Tentando: $Description" -ForegroundColor Yellow
    Write-Host "üìÅ Dockerfile: $Dockerfile" -ForegroundColor Cyan
    Write-Host "‚è≥ Aguarde..." -ForegroundColor Gray
    
    try {
        if ($Dockerfile -eq "default") {
            docker compose build --no-cache --pull tsel-backend
        } else {
            docker compose build --no-cache --pull --file "$Dockerfile" tsel-backend
        }
        
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ Sucesso com $Description!" -ForegroundColor Green
            return $true
        } else {
            Write-Host "‚ùå Falhou com $Description" -ForegroundColor Red
            return $false
        }
    }
    catch {
        Write-Host "‚ùå Erro: $($_.Exception.Message)" -ForegroundColor Red
        return $false
    }
}

# Op√ß√£o 1: Build com Dockerfile principal (melhorado)
Write-Host "1Ô∏è‚É£ Tentando build com Dockerfile principal (melhorado)..." -ForegroundColor Blue
if (Try-Build -Dockerfile "Dockerfile" -Description "Dockerfile principal com fallbacks") {
    Write-Host "üéâ Build conclu√≠do com sucesso!" -ForegroundColor Green
    exit 0
}

# Op√ß√£o 2: Build com Dockerfile alternativo (Ubuntu)
Write-Host "2Ô∏è‚É£ Tentando build com Dockerfile alternativo (Ubuntu)..." -ForegroundColor Blue
if (Try-Build -Dockerfile "Dockerfile.alternative" -Description "Dockerfile Ubuntu") {
    Write-Host "üéâ Build conclu√≠do com sucesso!" -ForegroundColor Green
    exit 0
}

# Op√ß√£o 3: Build com configura√ß√µes de rede espec√≠ficas
Write-Host "3Ô∏è‚É£ Tentando build com configura√ß√µes de rede espec√≠ficas..." -ForegroundColor Blue
$env:DOCKER_BUILDKIT = "1"
$env:BUILDKIT_PROGRESS = "plain"

if (Try-Build -Dockerfile "default" -Description "Build com BuildKit") {
    Write-Host "üéâ Build conclu√≠do com sucesso!" -ForegroundColor Green
    exit 0
}

# Op√ß√£o 4: Build sem depend√™ncias do sistema (se poss√≠vel)
Write-Host "4Ô∏è‚É£ Tentando build minimalista..." -ForegroundColor Blue

$minimalDockerfile = @"
FROM node:18-bullseye-slim
WORKDIR /app
COPY package*.json ./
RUN npm install --omit=dev --timeout=300000
COPY . .
RUN mkdir -p uploads/images uploads/videos uploads/audio uploads/documents logs backups
RUN chmod +x scripts/*.js
EXPOSE 3001
CMD ["node", "server.js"]
"@

$minimalDockerfile | Out-File -FilePath "Dockerfile.minimal" -Encoding UTF8

if (Try-Build -Dockerfile "Dockerfile.minimal" -Description "Dockerfile minimalista") {
    Write-Host "üéâ Build conclu√≠do com sucesso!" -ForegroundColor Green
    Remove-Item "Dockerfile.minimal" -Force
    exit 0
}

# Se chegou at√© aqui, todas as tentativas falharam
Write-Host ""
Write-Host "‚ùå Todas as tentativas de build falharam!" -ForegroundColor Red
Write-Host ""
Write-Host "üîß Sugest√µes para resolver:" -ForegroundColor Yellow
Write-Host "1. Verifique sua conex√£o com a internet" -ForegroundColor White
Write-Host "2. Tente usar uma VPN ou proxy" -ForegroundColor White
Write-Host "3. Execute: docker system prune -a" -ForegroundColor White
Write-Host "4. Tente em um hor√°rio diferente" -ForegroundColor White
Write-Host "5. Use: docker build --network=host ." -ForegroundColor White
Write-Host ""
Write-Host "üí° Comando alternativo para tentar:" -ForegroundColor Cyan
Write-Host "docker build --network=host --no-cache --pull -t tsel-backend ." -ForegroundColor Gray
